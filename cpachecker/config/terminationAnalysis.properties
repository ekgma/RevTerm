# Use predicateAnalysis as safety analysis.
#include predicateAnalysis-linear.properties

# Use this configuration as configuration for termination analysis.
termination.config = terminationAnalysis.properties

# Do not use default specification.
specification =

# Termination analysis requires the TerminationAlgorithm.
analysis.algorithm.termination = true

# Insert TerminationCPA in the stack of CPAs. 
TerminationCPA.cpa = cpa.composite.CompositeCPA
ARGCPA.cpa = cpa.termination.TerminationCPA

# Strengthen PredicateAbstractState with ranking relation from TerminationState.
cpa.predicate.strengthenWithFormulaReportingStates = true

# Add invariants generated by the LassoRanker library to the precision
cpa.predicate.invariants.addToPrecision = true

# The TerminationCPA adds variables that are relevant, but would not be tracked. 
cpa.predicate.ignoreIrrelevantVariables = false

# The termination analysis requires TerminationARGBasedRefiner as wrapper.
cegar.refiner = cpa.termination.TerminationARGBasedRefiner
cpa.termination.refiner = cpa.predicate.PredicateRefiner

# Counterexample for terminationAnalysis is not yet implemented
analysis.checkCounterexamples = false

# do not use the ARG to export the counterexample 
# because it only exports the stem (path to infinite loop) and
# we can write the complete counterexample
counterexample.export.exportWitness=false

# Set a default for solver.nonLinearArithmetic, because with JavaSMT's default CPAchecker
# would crash with UnsupportedOperationExceptions depending on which solver is used.
# We could use APPROXIMATE_FALLBACK as default, but this would make comparisons between
# solvers unfair, and at least small experiments showed no benefit in practice
# (if non-linear arithmetic is useful, it would be better to use bitvectors than linear
# approximation anyway).
solver.nonLinearArithmetic = APPROXIMATE_ALWAYS
