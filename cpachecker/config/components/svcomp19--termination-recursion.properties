#include ../predicateAnalysis-linear.properties

# Use this configuration as configuration for termination analysis.
termination.config = svcomp19--termination-recursion.properties

# Do not use default specification.
specification =

# Termination analysis requires the TerminationAlgorithm.
analysis.algorithm.termination = true

# Insert TerminationCPA in the stack of CPAs.
TerminationCPA.cpa = cpa.composite.CompositeCPA
ARGCPA.cpa = cpa.termination.TerminationCPA

# The termination analysis requires TerminationARGBasedRefiner as wrapper.
cegar.refiner = cpa.termination.TerminationARGBasedRefiner
cpa.termination.refiner = cpa.predicate.PredicateRefiner

# Strengthen PredicateAbstractState with ranking relation from TerminationState.
cpa.predicate.strengthenWithFormulaReportingStates = true

# Add invariants generated by the LassoRanker library to the precision
cpa.predicate.invariants.addToPrecision = true

# The TerminationCPA adds variables that are relevant, but would not be tracked.
cpa.predicate.ignoreIrrelevantVariables = false

# Counterexample for terminationAnalysis is not yet implemented
analysis.checkCounterexamples = false

solver.nonLinearArithmetic=USE
cpa.predicate.useArraysForHeap=false
cpa.predicate.maxArrayLength=20

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed=true

# recursion specific configuration

termination.considerRecursion = true

# ensure that analysis abstracts at beginning of recursion
# explicit nodes depend on recursion currently looked at
# and will be set by termination algorithm
cpa.predicate.blk.alwaysAtExplicitNodes = true

# during recursion need to stop when callstack differs
# may not use partitioned reached set which prohibits this behavior
analysis.reachedSet=LOCATIONMAPPED

# always restart to avoid problems with those children of refinement root
# that are not deleted in lazy refinement
cpa.predicate.refinement.restartAfterRefinements=1

# increase call stack depth (threshold tested out experimentally)
cpa.callstack.depth = 60