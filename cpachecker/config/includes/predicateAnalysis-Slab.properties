# --------------------------------------------------------------------------
# This is the base configuration for an analysis with symbolic
# program counters that uses Slicing Abstractions as refinement.
# It is based on the software model checker SLAB, see this paper:
#   Brückner, Ingo, Klaus Dräger, Bernd Finkbeiner, and Heike Wehrheim.
#   "Slicing abstractions." Fundamenta Informaticae 89,no. 4 (2008):369-392.
# --------------------------------------------------------------------------

cpa = cpa.slab.SLABCPA
SLABCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.slab.SLABPredicateWrappingCPA
SLABPredicateWrappingCPA.cpa = cpa.predicate.PredicateCPA

# this automaton defines which locations are the error locations
specification = ../specification/default.spc

# SlicingAbstractions does not use BDDs
cpa.predicate.abstraction.type = FORMULA

# Disable useless caches
cpa.predicate.abs.useCache = false
cpa.predicate.blk.useCache = false

# Set analysis for global refinement:
analysis.algorithm.CEGAR = true
cegar.globalRefinement = true
# cpa.automaton.breakOnTargetState = 0

cegar.refiner = cpa.slab.SLABRefiner

# do not throw symbolic program counters away as irrelevant variables:
cpa.predicate.ignoreIrrelevantVariables = false

# How to generate path formulas:
cpa.predicate.pathFormulaBuilderVariant = SYMBOLICLOCATIONS
cpa.predicate.refinement.graphblockformulastrategy = true

# Slicing Abstractions strategy settings:
cpa.predicate.slicingabstractions.optimizeslicing = false
cpa.predicate.slicingabstractions.dynamicBlockEncoding = false
cpa.predicate.slicingabstractions.removeSafeRegions = true
