// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking.
// ----------------------------------------------------------------------

// the loop unrolling bound
cpa.loopbound.maxLoopIterations = 1

// disable bounding assertions (default is enabled)
//bmc.boundingAssertions = false

// The rest of the options should not be changed.

// best traversal order for formula creation
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true
analysis.traversal.useReverseLoopstack = true
analysis.traversal.useReverseLoopIterationCount = true

analysis.algorithm.BMC = true

// ARGCPA is needed in order to create an error path for unsafe programs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA, cpa.value.ValueAnalysisCPA

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Do not dump stuff that is not meaningful when using BMC.
cpa.predicate.predmap.export = false
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false

// Ignore target states during formula creation
cpa.automaton.breakOnTargetState = 0

// Use merge^{JOIN} for value analysis alongside predicate to prevent unnecessary unrolling
cpa.value.merge = JOIN
